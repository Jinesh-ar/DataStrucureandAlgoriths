
Data Structure and algorithms Day8 assignment


answer 2)

#include <bits/stdc++.h> 
using namespace std; 
  
struct MyStack 
{ 
    stack<int> s; 
    int minEle; 
  
    void getMin() 
    { 
        if (s.empty()) 
            cout << "Stack is empty\n"; 
  
        else
            cout <<"Minimum Element in the stack is: "
                 << minEle << "\n"; 
    } 
  
   
    void peek() 
    { 
        if (s.empty()) 
        { 
            cout << "Stack is empty "; 
            return; 
        } 
  
        int t = s.top(); // Top element. 
  
        cout << "Top Most Element is: "; 
  
        (t < minEle)? cout << minEle: cout << t; 
    } 
  
    
    void pop() 
    { 
        if (s.empty()) 
        { 
            cout << "Stack is empty\n"; 
            return; 
        } 
  
        cout << "Top Most Element Removed: "; 
        int t = s.top(); 
        s.pop(); 
 
        if (t < minEle) 
        { 
            cout << minEle << "\n"; 
            minEle = 2*minEle - t; 
        } 
  
        else
            cout << t << "\n"; 
    } 
  
   
    void push(int x) 
    { 
        
        if (s.empty()) 
        { 
            minEle = x; 
            s.push(x); 
            cout <<  "Number Inserted: " << x << "\n"; 
            return; 
        } 
  
        if (x < minEle) 
        { 
            s.push(2*x - minEle); 
            minEle = x; 
        } 
  
        else
           s.push(x); 
  
        cout <<  "Number Inserted: " << x << "\n"; 
    } 
}; 

	int data = arr[front]; 
	arr[front] = -1; 
	if (front == rear) 
	{ 
		front = -1; 
		rear = -1; 
	} 
	else if (front == size-1) 
		front = 0; 
	else
		front++; 

	return data; 
} 
 
void Queue::displayQueue() 
{ 
	if (front == -1) 
	{ 
		printf("\nQueue is Empty"); 
		return; 
	} 
	printf("\nElements in Circular Queue are: "); 
	if (rear >= front) 
	{ 
		for (int i = front; i <= rear; i++) 
			printf("%d ",arr[i]); 
	} 
	else
	{ 
		for (int i = front; i < size; i++) 
			printf("%d ", arr[i]); 

		for (int i = 0; i <= rear; i++) 
			printf("%d ", arr[i]); 
	} 
} 


int main() 
{ 
	Queue q(5); 

	
	q.enQueue(14); 
	q.enQueue(22); 
	q.enQueue(13); 
	q.enQueue(-6); 

	
	q.displayQueue(); 

	printf("\nDeleted value = %d", q.deQueue()); 
	printf("\nDeleted value = %d", q.deQueue()); 

	q.displayQueue(); 

	q.enQueue(9); 
	q.enQueue(20); 
	q.enQueue(5); 

	q.displayQueue(); 

	q.enQueue(20); 
	return 0; 
} 
